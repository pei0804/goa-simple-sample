// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "goa simple sample": CLI Commands
//
// Command:
// $ goagen
// --design=github.com/pei0804/goa-simple-sample/design
// --out=$(GOPATH)/src/github.com/pei0804/goa-simple-sample
// --version=v1.2.0-dirty

package cli

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/pei0804/goa-simple-sample/client"
	"github.com/spf13/cobra"
	"log"
	"net/url"
	"os"
	"path"
	"strconv"
	"strings"
	"time"
)

type (
	// AddAccountsCommand is the command line data structure for the add action of accounts
	AddAccountsCommand struct {
		// email
		Email string
		// 名前
		Name        string
		PrettyPrint bool
	}

	// DeleteAccountsCommand is the command line data structure for the delete action of accounts
	DeleteAccountsCommand struct {
		// 名前
		ID          int
		PrettyPrint bool
	}

	// ListAccountsCommand is the command line data structure for the list action of accounts
	ListAccountsCommand struct {
		PrettyPrint bool
	}

	// ShowAccountsCommand is the command line data structure for the show action of accounts
	ShowAccountsCommand struct {
		// id
		ID          int
		PrettyPrint bool
	}

	// UpdateAccountsCommand is the command line data structure for the update action of accounts
	UpdateAccountsCommand struct {
		// id
		ID int
		// email
		Email string
		// 名前
		Name        string
		PrettyPrint bool
	}

	// AddAccountsDataCommand is the command line data structure for the add action of accounts_data
	AddAccountsDataCommand struct {
		// email
		Email string
		// 名前
		Name        string
		PrettyPrint bool
	}

	// DeleteAccountsDataCommand is the command line data structure for the delete action of accounts_data
	DeleteAccountsDataCommand struct {
		// 名前
		ID          int
		PrettyPrint bool
	}

	// ListAccountsDataCommand is the command line data structure for the list action of accounts_data
	ListAccountsDataCommand struct {
		PrettyPrint bool
	}

	// ShowAccountsDataCommand is the command line data structure for the show action of accounts_data
	ShowAccountsDataCommand struct {
		// id
		ID          int
		PrettyPrint bool
	}

	// UpdateAccountsDataCommand is the command line data structure for the update action of accounts_data
	UpdateAccountsDataCommand struct {
		// id
		ID int
		// email
		Email string
		// 名前
		Name        string
		PrettyPrint bool
	}

	// HelloActionsCommand is the command line data structure for the hello action of actions
	HelloActionsCommand struct {
		// 名前
		Name        string
		PrettyPrint bool
	}

	// IDActionsCommand is the command line data structure for the id action of actions
	IDActionsCommand struct {
		// id
		ID          int
		PrettyPrint bool
	}

	// PingActionsCommand is the command line data structure for the ping action of actions
	PingActionsCommand struct {
		PrettyPrint bool
	}

	// AddBottlesCommand is the command line data structure for the add action of bottles
	AddBottlesCommand struct {
		// アカウントID
		AccountID int
		// ボトル名
		Name string
		// 数量
		Quantity    int
		PrettyPrint bool
	}

	// DeleteBottlesCommand is the command line data structure for the delete action of bottles
	DeleteBottlesCommand struct {
		// id
		ID          int
		PrettyPrint bool
	}

	// ListBottlesCommand is the command line data structure for the list action of bottles
	ListBottlesCommand struct {
		PrettyPrint bool
	}

	// ListRelationBottlesCommand is the command line data structure for the listRelation action of bottles
	ListRelationBottlesCommand struct {
		PrettyPrint bool
	}

	// ShowBottlesCommand is the command line data structure for the show action of bottles
	ShowBottlesCommand struct {
		// id
		ID          int
		PrettyPrint bool
	}

	// UpdateBottlesCommand is the command line data structure for the update action of bottles
	UpdateBottlesCommand struct {
		// id
		ID int
		// ボトル名
		Name string
		// 数量
		Quantity    int
		PrettyPrint bool
	}

	// AddBottlesDataCommand is the command line data structure for the add action of bottles_data
	AddBottlesDataCommand struct {
		// アカウントID
		AccountID int
		// ボトル名
		Name string
		// 数量
		Quantity    int
		PrettyPrint bool
	}

	// DeleteBottlesDataCommand is the command line data structure for the delete action of bottles_data
	DeleteBottlesDataCommand struct {
		// id
		ID          int
		PrettyPrint bool
	}

	// ListBottlesDataCommand is the command line data structure for the list action of bottles_data
	ListBottlesDataCommand struct {
		PrettyPrint bool
	}

	// ShowBottlesDataCommand is the command line data structure for the show action of bottles_data
	ShowBottlesDataCommand struct {
		// id
		ID          int
		PrettyPrint bool
	}

	// UpdateBottlesDataCommand is the command line data structure for the update action of bottles_data
	UpdateBottlesDataCommand struct {
		// id
		ID int
		// ボトル名
		Name string
		// 数量
		Quantity    int
		PrettyPrint bool
	}

	// EtcMethodCommand is the command line data structure for the etc action of method
	EtcMethodCommand struct {
		// id
		ID int
		// タイプ
		Type        int
		PrettyPrint bool
	}

	// FollowMethodCommand is the command line data structure for the follow action of method
	FollowMethodCommand struct {
		PrettyPrint bool
	}

	// ListMethodCommand is the command line data structure for the list action of method
	ListMethodCommand struct {
		PrettyPrint bool
	}

	// MethodMethodCommand is the command line data structure for the method action of method
	MethodMethodCommand struct {
		PrettyPrint bool
	}

	// ArrayResponseCommand is the command line data structure for the array action of response
	ArrayResponseCommand struct {
		PrettyPrint bool
	}

	// HashResponseCommand is the command line data structure for the hash action of response
	HashResponseCommand struct {
		PrettyPrint bool
	}

	// ListResponseCommand is the command line data structure for the list action of response
	ListResponseCommand struct {
		PrettyPrint bool
	}

	// NestedResponseCommand is the command line data structure for the nested action of response
	NestedResponseCommand struct {
		Test        string
		PrettyPrint bool
	}

	// ShowResponseCommand is the command line data structure for the show action of response
	ShowResponseCommand struct {
		ID          string
		PrettyPrint bool
	}

	// SecuritySecurityCommand is the command line data structure for the security action of security
	SecuritySecurityCommand struct {
		PrettyPrint bool
	}

	// ValidationValidationCommand is the command line data structure for the validation action of validation
	ValidationValidationCommand struct {
		// デフォルト値
		DefaultType string
		// メールアドレス
		Email string
		// 列挙型
		EnumType string
		// id
		ID int
		// 数字（1〜10）
		IntegerType int
		// 正規表現
		Reg string
		// 文字（1~10文字）
		StringType  string
		PrettyPrint bool
	}

	// DownloadCommand is the command line data structure for the download command.
	DownloadCommand struct {
		// OutFile is the path to the download output file.
		OutFile string
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "add",
		Short: `add action`,
	}
	tmp1 := new(AddAccountsCommand)
	sub = &cobra.Command{
		Use:   `accounts ["/api/v1/accounts"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp1.Run(c, args) },
	}
	tmp1.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp1.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp2 := new(AddAccountsDataCommand)
	sub = &cobra.Command{
		Use:   `accounts-data ["/api/v1/accounts_data"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp2.Run(c, args) },
	}
	tmp2.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp2.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp3 := new(AddBottlesCommand)
	sub = &cobra.Command{
		Use:   `bottles ["/api/v1/bottles"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp3.Run(c, args) },
	}
	tmp3.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp3.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp4 := new(AddBottlesDataCommand)
	sub = &cobra.Command{
		Use:   `bottles-data ["/api/v1/bottles_data"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp4.Run(c, args) },
	}
	tmp4.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp4.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "array",
		Short: `ユーザー（配列）`,
	}
	tmp5 := new(ArrayResponseCommand)
	sub = &cobra.Command{
		Use:   `response ["/api/v1/response/users/array"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp5.Run(c, args) },
	}
	tmp5.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp5.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "delete",
		Short: `delete action`,
	}
	tmp6 := new(DeleteAccountsCommand)
	sub = &cobra.Command{
		Use:   `accounts ["/api/v1/accounts/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp6.Run(c, args) },
	}
	tmp6.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp6.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp7 := new(DeleteAccountsDataCommand)
	sub = &cobra.Command{
		Use:   `accounts-data ["/api/v1/accounts_data/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp7.Run(c, args) },
	}
	tmp7.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp7.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp8 := new(DeleteBottlesCommand)
	sub = &cobra.Command{
		Use:   `bottles ["/api/v1/bottles/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp8.Run(c, args) },
	}
	tmp8.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp8.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp9 := new(DeleteBottlesDataCommand)
	sub = &cobra.Command{
		Use:   `bottles-data ["/api/v1/bottles_data/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp9.Run(c, args) },
	}
	tmp9.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp9.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "etc",
		Short: `ちょっと特殊ケース`,
	}
	tmp10 := new(EtcMethodCommand)
	sub = &cobra.Command{
		Use:   `method ["/api/v1/method/users/ID/follow/TYPE"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp10.Run(c, args) },
	}
	tmp10.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp10.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "follow",
		Short: `フォロー操作`,
	}
	tmp11 := new(FollowMethodCommand)
	sub = &cobra.Command{
		Use:   `method [("/api/v1/method/users/follow"|"/api/v1/method/users/follow")]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp11.Run(c, args) },
	}
	tmp11.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp11.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "hash",
		Short: `ユーザー（ハッシュ）`,
	}
	tmp12 := new(HashResponseCommand)
	sub = &cobra.Command{
		Use:   `response ["/api/v1/response/users/hash"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp12.Run(c, args) },
	}
	tmp12.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp12.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "hello",
		Short: `挨拶する`,
	}
	tmp13 := new(HelloActionsCommand)
	sub = &cobra.Command{
		Use:   `actions ["/api/v1/actions/hello"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp13.Run(c, args) },
	}
	tmp13.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp13.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "id",
		Short: `複数アクション（:id）`,
	}
	tmp14 := new(IDActionsCommand)
	sub = &cobra.Command{
		Use:   `actions ["/api/v1/actions/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp14.Run(c, args) },
	}
	tmp14.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp14.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list",
		Short: `list action`,
	}
	tmp15 := new(ListAccountsCommand)
	sub = &cobra.Command{
		Use:   `accounts ["/api/v1/accounts"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp15.Run(c, args) },
	}
	tmp15.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp15.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp16 := new(ListAccountsDataCommand)
	sub = &cobra.Command{
		Use:   `accounts-data ["/api/v1/accounts_data"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp16.Run(c, args) },
	}
	tmp16.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp16.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp17 := new(ListBottlesCommand)
	sub = &cobra.Command{
		Use:   `bottles ["/api/v1/bottles"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp17.Run(c, args) },
	}
	tmp17.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp17.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp18 := new(ListBottlesDataCommand)
	sub = &cobra.Command{
		Use:   `bottles-data ["/api/v1/bottles_data"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp18.Run(c, args) },
	}
	tmp18.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp18.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp19 := new(ListMethodCommand)
	sub = &cobra.Command{
		Use:   `method [("/api/v1/method/list"|"/api/v1/method/list/new"|"/api/v1/method/list/topic")]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp19.Run(c, args) },
	}
	tmp19.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp19.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp20 := new(ListResponseCommand)
	sub = &cobra.Command{
		Use:   `response ["/api/v1/response/users"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp20.Run(c, args) },
	}
	tmp20.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp20.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list-relation",
		Short: `複数(リレーション版)`,
	}
	tmp21 := new(ListRelationBottlesCommand)
	sub = &cobra.Command{
		Use:   `bottles ["/api/v1/bottles/relation"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp21.Run(c, args) },
	}
	tmp21.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp21.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "method",
		Short: `HTTPメソッド`,
	}
	tmp22 := new(MethodMethodCommand)
	sub = &cobra.Command{
		Use:   `method [("/api/v1/method/get"|"/api/v1/method/post"|"/api/v1/method/delete"|"/api/v1/method/put")]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp22.Run(c, args) },
	}
	tmp22.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp22.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "nested",
		Short: `ネストしたMediaType`,
	}
	tmp23 := new(NestedResponseCommand)
	sub = &cobra.Command{
		Use:   `response ["/api/v1/response/users/nested"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp23.Run(c, args) },
	}
	tmp23.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp23.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "ping",
		Short: `サーバーとの導通確認`,
	}
	tmp24 := new(PingActionsCommand)
	sub = &cobra.Command{
		Use:   `actions ["/api/v1/actions/ping"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp24.Run(c, args) },
	}
	tmp24.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp24.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "security",
		Short: `セキュリティの例です`,
	}
	tmp25 := new(SecuritySecurityCommand)
	sub = &cobra.Command{
		Use:   `security ["/api/v1/securiy"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp25.Run(c, args) },
	}
	tmp25.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp25.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "show",
		Short: `show action`,
	}
	tmp26 := new(ShowAccountsCommand)
	sub = &cobra.Command{
		Use:   `accounts ["/api/v1/accounts/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp26.Run(c, args) },
	}
	tmp26.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp26.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp27 := new(ShowAccountsDataCommand)
	sub = &cobra.Command{
		Use:   `accounts-data ["/api/v1/accounts_data/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp27.Run(c, args) },
	}
	tmp27.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp27.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp28 := new(ShowBottlesCommand)
	sub = &cobra.Command{
		Use:   `bottles ["/api/v1/bottles/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp28.Run(c, args) },
	}
	tmp28.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp28.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp29 := new(ShowBottlesDataCommand)
	sub = &cobra.Command{
		Use:   `bottles-data ["/api/v1/bottles_data/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp29.Run(c, args) },
	}
	tmp29.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp29.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp30 := new(ShowResponseCommand)
	sub = &cobra.Command{
		Use:   `response ["/api/v1/response/users/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp30.Run(c, args) },
	}
	tmp30.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp30.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update",
		Short: `update action`,
	}
	tmp31 := new(UpdateAccountsCommand)
	sub = &cobra.Command{
		Use:   `accounts ["/api/v1/accounts/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp31.Run(c, args) },
	}
	tmp31.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp31.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp32 := new(UpdateAccountsDataCommand)
	sub = &cobra.Command{
		Use:   `accounts-data ["/api/v1/accounts_data/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp32.Run(c, args) },
	}
	tmp32.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp32.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp33 := new(UpdateBottlesCommand)
	sub = &cobra.Command{
		Use:   `bottles ["/api/v1/bottles/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp33.Run(c, args) },
	}
	tmp33.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp33.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp34 := new(UpdateBottlesDataCommand)
	sub = &cobra.Command{
		Use:   `bottles-data ["/api/v1/bottles_data/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp34.Run(c, args) },
	}
	tmp34.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp34.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "validation",
		Short: `Validation`,
	}
	tmp35 := new(ValidationValidationCommand)
	sub = &cobra.Command{
		Use:   `validation ["/api/v1/validation"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp35.Run(c, args) },
	}
	tmp35.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp35.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)

	dl := new(DownloadCommand)
	dlc := &cobra.Command{
		Use:   "download [PATH]",
		Short: "Download file with given path",
		RunE: func(cmd *cobra.Command, args []string) error {
			return dl.Run(c, args)
		},
	}
	dlc.Flags().StringVar(&dl.OutFile, "out", "", "Output file")
	app.AddCommand(dlc)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run downloads files with given paths.
func (cmd *DownloadCommand) Run(c *client.Client, args []string) error {
	var (
		fnf func(context.Context, string) (int64, error)
		fnd func(context.Context, string, string) (int64, error)

		rpath   = args[0]
		outfile = cmd.OutFile
		logger  = goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
		ctx     = goa.WithLogger(context.Background(), logger)
		err     error
	)

	if rpath[0] != '/' {
		rpath = "/" + rpath
	}
	if rpath == "/swagger.json" {
		fnf = c.DownloadSwaggerJSON
		if outfile == "" {
			outfile = "swagger.json"
		}
		goto found
	}
	if strings.HasPrefix(rpath, "/js/") {
		fnd = c.DownloadJs
		rpath = rpath[4:]
		if outfile == "" {
			_, outfile = path.Split(rpath)
		}
		goto found
	}
	if strings.HasPrefix(rpath, "/swagger/") {
		fnd = c.DownloadSwagger
		rpath = rpath[9:]
		if outfile == "" {
			_, outfile = path.Split(rpath)
		}
		goto found
	}
	return fmt.Errorf("don't know how to download %s", rpath)
found:
	ctx = goa.WithLogContext(ctx, "file", outfile)
	if fnf != nil {
		_, err = fnf(ctx, outfile)
	} else {
		_, err = fnd(ctx, rpath, outfile)
	}
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	return nil
}

// Run makes the HTTP request corresponding to the AddAccountsCommand command.
func (cmd *AddAccountsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/accounts"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddAccounts(ctx, path, cmd.Email, cmd.Name)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddAccountsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var email string
	cc.Flags().StringVar(&cmd.Email, "email", email, `email`)
	var name string
	cc.Flags().StringVar(&cmd.Name, "name", name, `名前`)
}

// Run makes the HTTP request corresponding to the DeleteAccountsCommand command.
func (cmd *DeleteAccountsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/accounts/%v", cmd.ID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteAccounts(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteAccountsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id int
	cc.Flags().IntVar(&cmd.ID, "id", id, `名前`)
}

// Run makes the HTTP request corresponding to the ListAccountsCommand command.
func (cmd *ListAccountsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/accounts"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListAccounts(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListAccountsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ShowAccountsCommand command.
func (cmd *ShowAccountsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/accounts/%v", cmd.ID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowAccounts(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowAccountsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id int
	cc.Flags().IntVar(&cmd.ID, "id", id, `id`)
}

// Run makes the HTTP request corresponding to the UpdateAccountsCommand command.
func (cmd *UpdateAccountsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/accounts/%v", cmd.ID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateAccounts(ctx, path, stringFlagVal("email", cmd.Email), stringFlagVal("name", cmd.Name))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateAccountsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id int
	cc.Flags().IntVar(&cmd.ID, "id", id, `id`)
	var email string
	cc.Flags().StringVar(&cmd.Email, "email", email, `email`)
	var name string
	cc.Flags().StringVar(&cmd.Name, "name", name, `名前`)
}

// Run makes the HTTP request corresponding to the AddAccountsDataCommand command.
func (cmd *AddAccountsDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/accounts_data"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddAccountsData(ctx, path, cmd.Email, cmd.Name)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddAccountsDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var email string
	cc.Flags().StringVar(&cmd.Email, "email", email, `email`)
	var name string
	cc.Flags().StringVar(&cmd.Name, "name", name, `名前`)
}

// Run makes the HTTP request corresponding to the DeleteAccountsDataCommand command.
func (cmd *DeleteAccountsDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/accounts_data/%v", cmd.ID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteAccountsData(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteAccountsDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id int
	cc.Flags().IntVar(&cmd.ID, "id", id, `名前`)
}

// Run makes the HTTP request corresponding to the ListAccountsDataCommand command.
func (cmd *ListAccountsDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/accounts_data"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListAccountsData(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListAccountsDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ShowAccountsDataCommand command.
func (cmd *ShowAccountsDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/accounts_data/%v", cmd.ID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowAccountsData(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowAccountsDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id int
	cc.Flags().IntVar(&cmd.ID, "id", id, `id`)
}

// Run makes the HTTP request corresponding to the UpdateAccountsDataCommand command.
func (cmd *UpdateAccountsDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/accounts_data/%v", cmd.ID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateAccountsData(ctx, path, stringFlagVal("email", cmd.Email), stringFlagVal("name", cmd.Name))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateAccountsDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id int
	cc.Flags().IntVar(&cmd.ID, "id", id, `id`)
	var email string
	cc.Flags().StringVar(&cmd.Email, "email", email, `email`)
	var name string
	cc.Flags().StringVar(&cmd.Name, "name", name, `名前`)
}

// Run makes the HTTP request corresponding to the HelloActionsCommand command.
func (cmd *HelloActionsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/actions/hello"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.HelloActions(ctx, path, cmd.Name)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *HelloActionsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var name string
	cc.Flags().StringVar(&cmd.Name, "name", name, `名前`)
}

// Run makes the HTTP request corresponding to the IDActionsCommand command.
func (cmd *IDActionsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/actions/%v", cmd.ID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.IDActions(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *IDActionsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id int
	cc.Flags().IntVar(&cmd.ID, "id", id, `id`)
}

// Run makes the HTTP request corresponding to the PingActionsCommand command.
func (cmd *PingActionsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/actions/ping"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.PingActions(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *PingActionsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the AddBottlesCommand command.
func (cmd *AddBottlesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/bottles"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddBottles(ctx, path, cmd.AccountID, cmd.Name, cmd.Quantity)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddBottlesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var accountID int
	cc.Flags().IntVar(&cmd.AccountID, "account_id", accountID, `アカウントID`)
	var name string
	cc.Flags().StringVar(&cmd.Name, "name", name, `ボトル名`)
	var quantity int
	cc.Flags().IntVar(&cmd.Quantity, "quantity", quantity, `数量`)
}

// Run makes the HTTP request corresponding to the DeleteBottlesCommand command.
func (cmd *DeleteBottlesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/bottles/%v", cmd.ID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteBottles(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteBottlesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id int
	cc.Flags().IntVar(&cmd.ID, "id", id, `id`)
}

// Run makes the HTTP request corresponding to the ListBottlesCommand command.
func (cmd *ListBottlesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/bottles"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListBottles(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListBottlesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ListRelationBottlesCommand command.
func (cmd *ListRelationBottlesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/bottles/relation"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListRelationBottles(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListRelationBottlesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ShowBottlesCommand command.
func (cmd *ShowBottlesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/bottles/%v", cmd.ID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowBottles(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowBottlesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id int
	cc.Flags().IntVar(&cmd.ID, "id", id, `id`)
}

// Run makes the HTTP request corresponding to the UpdateBottlesCommand command.
func (cmd *UpdateBottlesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/bottles/%v", cmd.ID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateBottles(ctx, path, stringFlagVal("name", cmd.Name), intFlagVal("quantity", cmd.Quantity))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateBottlesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id int
	cc.Flags().IntVar(&cmd.ID, "id", id, `id`)
	var name string
	cc.Flags().StringVar(&cmd.Name, "name", name, `ボトル名`)
	var quantity int
	cc.Flags().IntVar(&cmd.Quantity, "quantity", quantity, `数量`)
}

// Run makes the HTTP request corresponding to the AddBottlesDataCommand command.
func (cmd *AddBottlesDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/bottles_data"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.AddBottlesData(ctx, path, cmd.AccountID, cmd.Name, cmd.Quantity)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *AddBottlesDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var accountID int
	cc.Flags().IntVar(&cmd.AccountID, "account_id", accountID, `アカウントID`)
	var name string
	cc.Flags().StringVar(&cmd.Name, "name", name, `ボトル名`)
	var quantity int
	cc.Flags().IntVar(&cmd.Quantity, "quantity", quantity, `数量`)
}

// Run makes the HTTP request corresponding to the DeleteBottlesDataCommand command.
func (cmd *DeleteBottlesDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/bottles_data/%v", cmd.ID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteBottlesData(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteBottlesDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id int
	cc.Flags().IntVar(&cmd.ID, "id", id, `id`)
}

// Run makes the HTTP request corresponding to the ListBottlesDataCommand command.
func (cmd *ListBottlesDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/bottles_data"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListBottlesData(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListBottlesDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ShowBottlesDataCommand command.
func (cmd *ShowBottlesDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/bottles_data/%v", cmd.ID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowBottlesData(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowBottlesDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id int
	cc.Flags().IntVar(&cmd.ID, "id", id, `id`)
}

// Run makes the HTTP request corresponding to the UpdateBottlesDataCommand command.
func (cmd *UpdateBottlesDataCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/bottles_data/%v", cmd.ID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateBottlesData(ctx, path, stringFlagVal("name", cmd.Name), intFlagVal("quantity", cmd.Quantity))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateBottlesDataCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id int
	cc.Flags().IntVar(&cmd.ID, "id", id, `id`)
	var name string
	cc.Flags().StringVar(&cmd.Name, "name", name, `ボトル名`)
	var quantity int
	cc.Flags().IntVar(&cmd.Quantity, "quantity", quantity, `数量`)
}

// Run makes the HTTP request corresponding to the EtcMethodCommand command.
func (cmd *EtcMethodCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/method/users/%v/follow/%v", cmd.ID, cmd.Type)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.EtcMethod(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *EtcMethodCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id int
	cc.Flags().IntVar(&cmd.ID, "id", id, `id`)
	var type_ int
	cc.Flags().IntVar(&cmd.Type, "type", type_, `タイプ`)
}

// Run makes the HTTP request corresponding to the FollowMethodCommand command.
func (cmd *FollowMethodCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/method/users/follow"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.FollowMethod(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *FollowMethodCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ListMethodCommand command.
func (cmd *ListMethodCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/method/list"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListMethod(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListMethodCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the MethodMethodCommand command.
func (cmd *MethodMethodCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/method/get"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.MethodMethod(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *MethodMethodCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ArrayResponseCommand command.
func (cmd *ArrayResponseCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/response/users/array"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ArrayResponse(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ArrayResponseCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the HashResponseCommand command.
func (cmd *HashResponseCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/response/users/hash"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.HashResponse(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *HashResponseCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ListResponseCommand command.
func (cmd *ListResponseCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/response/users"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListResponse(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListResponseCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the NestedResponseCommand command.
func (cmd *NestedResponseCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/response/users/nested"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.NestedResponse(ctx, path, cmd.Test)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *NestedResponseCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var test string
	cc.Flags().StringVar(&cmd.Test, "test", test, ``)
}

// Run makes the HTTP request corresponding to the ShowResponseCommand command.
func (cmd *ShowResponseCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/response/users/%v", url.QueryEscape(cmd.ID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowResponse(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowResponseCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id string
	cc.Flags().StringVar(&cmd.ID, "id", id, ``)
}

// Run makes the HTTP request corresponding to the SecuritySecurityCommand command.
func (cmd *SecuritySecurityCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/securiy"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.SecuritySecurity(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SecuritySecurityCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ValidationValidationCommand command.
func (cmd *ValidationValidationCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/validation"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ValidationValidation(ctx, path, cmd.DefaultType, cmd.Email, cmd.EnumType, cmd.ID, cmd.IntegerType, cmd.Reg, cmd.StringType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ValidationValidationCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.DefaultType, "defaultType", "でふぉ", `デフォルト値`)
	var email string
	cc.Flags().StringVar(&cmd.Email, "email", email, `メールアドレス`)
	var enumType string
	cc.Flags().StringVar(&cmd.EnumType, "enumType", enumType, `列挙型`)
	var id int
	cc.Flags().IntVar(&cmd.ID, "id", id, `id`)
	var integerType int
	cc.Flags().IntVar(&cmd.IntegerType, "integerType", integerType, `数字（1〜10）`)
	var reg string
	cc.Flags().StringVar(&cmd.Reg, "reg", reg, `正規表現`)
	var stringType string
	cc.Flags().StringVar(&cmd.StringType, "stringType", stringType, `文字（1~10文字）`)
}
