// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/tikasan/goa-simple-sample/design
// --out=$(GOPATH)/src/github.com/tikasan/goa-simple-sample
// --version=v1.1.0
//
// API "goa simple sample": Model Helpers
//
// The content of this file is auto-generated, DO NOT MODIFY

package models

import (
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"github.com/tikasan/goa-simple-sample/app"
	"golang.org/x/net/context"
	"time"
)

// MediaType Retrieval Functions

// ListBottle returns an array of view: default.
func (m *BottleDB) ListBottle(ctx context.Context, accountID int) []*app.Bottle {
	defer goa.MeasureSince([]string{"goa", "db", "bottle", "listbottle"}, time.Now())

	var native []*Bottle
	var objs []*app.Bottle
	err := m.Db.Scopes(BottleFilterByAccount(accountID, m.Db)).Table(m.TableName()).Preload("Account").Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Bottle", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.BottleToBottle())
	}

	return objs
}

// BottleToBottle loads a Bottle and builds the default view of media type Bottle.
func (m *Bottle) BottleToBottle() *app.Bottle {
	bottle := &app.Bottle{}
	bottle.Links = &app.BottleLinks{}
	tmp1 := m.Account.AccountToAccountLink()
	bottle.Links.Account = tmp1
	bottle.ID = m.ID
	bottle.Name = m.Name
	bottle.Quantity = m.Quantity

	return bottle
}

// OneBottle loads a Bottle and builds the default view of media type Bottle.
func (m *BottleDB) OneBottle(ctx context.Context, id int, accountID int) (*app.Bottle, error) {
	defer goa.MeasureSince([]string{"goa", "db", "bottle", "onebottle"}, time.Now())

	var native Bottle
	err := m.Db.Scopes(BottleFilterByAccount(accountID, m.Db)).Table(m.TableName()).Preload("BottleCategories").Preload("Account").Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Bottle", "error", err.Error())
		return nil, err
	}

	view := *native.BottleToBottle()
	return &view, err
}
