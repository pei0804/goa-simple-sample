// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "goa simple sample": accounts_data Resource Client
//
// Command:
// $ goagen
// --design=github.com/tikasan/goa-simple-sample/design
// --out=$(GOPATH)/src/github.com/tikasan/goa-simple-sample
// --version=v1.2.0-dirty

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// AddAccountsDataPath computes a request path to the add action of accounts_data.
func AddAccountsDataPath() string {

	return fmt.Sprintf("/api/v1/accounts_data")
}

// 追加
func (c *Client) AddAccountsData(ctx context.Context, path string, email string, name string) (*http.Response, error) {
	req, err := c.NewAddAccountsDataRequest(ctx, path, email, name)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddAccountsDataRequest create the request corresponding to the add action endpoint of the accounts_data resource.
func (c *Client) NewAddAccountsDataRequest(ctx context.Context, path string, email string, name string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	values.Set("email", email)
	values.Set("name", name)
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteAccountsDataPath computes a request path to the delete action of accounts_data.
func DeleteAccountsDataPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/api/v1/accounts_data/%s", param0)
}

// 削除
func (c *Client) DeleteAccountsData(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteAccountsDataRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteAccountsDataRequest create the request corresponding to the delete action endpoint of the accounts_data resource.
func (c *Client) NewDeleteAccountsDataRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListAccountsDataPath computes a request path to the list action of accounts_data.
func ListAccountsDataPath() string {

	return fmt.Sprintf("/api/v1/accounts_data")
}

// 複数
func (c *Client) ListAccountsData(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListAccountsDataRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListAccountsDataRequest create the request corresponding to the list action endpoint of the accounts_data resource.
func (c *Client) NewListAccountsDataRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowAccountsDataPath computes a request path to the show action of accounts_data.
func ShowAccountsDataPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/api/v1/accounts_data/%s", param0)
}

// 単数
func (c *Client) ShowAccountsData(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowAccountsDataRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowAccountsDataRequest create the request corresponding to the show action endpoint of the accounts_data resource.
func (c *Client) NewShowAccountsDataRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateAccountsDataPath computes a request path to the update action of accounts_data.
func UpdateAccountsDataPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/api/v1/accounts_data/%s", param0)
}

// 更新
func (c *Client) UpdateAccountsData(ctx context.Context, path string, email *string, name *string) (*http.Response, error) {
	req, err := c.NewUpdateAccountsDataRequest(ctx, path, email, name)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateAccountsDataRequest create the request corresponding to the update action endpoint of the accounts_data resource.
func (c *Client) NewUpdateAccountsDataRequest(ctx context.Context, path string, email *string, name *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if email != nil {
		values.Set("email", *email)
	}
	if name != nil {
		values.Set("name", *name)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
