// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/tikasan/goa-simple-sample/design
// --out=$(GOPATH)/src/github.com/tikasan/goa-simple-sample
// --version=v1.1.0
//
// API "goa simple sample": Application Media Types
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"github.com/goadesign/goa"
	"net/http"
)

// celler account (default view)
//
// Identifier: application/vnd.account+json; view=default
type Account struct {
	// メールアドレス
	Email string `form:"email" json:"email" xml:"email"`
	// id
	ID int `form:"id" json:"id" xml:"id"`
	// 名前
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate validates the Account media type instance.
func (mt *Account) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "email"))
	}
	return
}

// celler account (link view)
//
// Identifier: application/vnd.account+json; view=link
type AccountLink struct {
	// メールアドレス
	Email string `form:"email" json:"email" xml:"email"`
	// id
	ID int `form:"id" json:"id" xml:"id"`
	// 名前
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate validates the AccountLink media type instance.
func (mt *AccountLink) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "email"))
	}
	return
}

// DecodeAccount decodes the Account instance encoded in resp body.
func (c *Client) DecodeAccount(resp *http.Response) (*Account, error) {
	var decoded Account
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeAccountLink decodes the AccountLink instance encoded in resp body.
func (c *Client) DecodeAccountLink(resp *http.Response) (*AccountLink, error) {
	var decoded AccountLink
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// AccountCollection is the media type for an array of Account (default view)
//
// Identifier: application/vnd.account+json; type=collection; view=default
type AccountCollection []*Account

// Validate validates the AccountCollection media type instance.
func (mt AccountCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// AccountCollection is the media type for an array of Account (link view)
//
// Identifier: application/vnd.account+json; type=collection; view=link
type AccountLinkCollection []*AccountLink

// Validate validates the AccountLinkCollection media type instance.
func (mt AccountLinkCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeAccountCollection decodes the AccountCollection instance encoded in resp body.
func (c *Client) DecodeAccountCollection(resp *http.Response) (AccountCollection, error) {
	var decoded AccountCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeAccountLinkCollection decodes the AccountLinkCollection instance encoded in resp body.
func (c *Client) DecodeAccountLinkCollection(resp *http.Response) (AccountLinkCollection, error) {
	var decoded AccountLinkCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// example (default view)
//
// Identifier: application/vnd.articletype+json; view=default
type Articletype struct {
	Data     []*Data `form:"data" json:"data" xml:"data"`
	Response *OK     `form:"response" json:"response" xml:"response"`
}

// Validate validates the Articletype media type instance.
func (mt *Articletype) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Response == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "response"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeArticletype decodes the Articletype instance encoded in resp body.
func (c *Client) DecodeArticletype(resp *http.Response) (*Articletype, error) {
	var decoded Articletype
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// celler bottles (default view)
//
// Identifier: application/vnd.bottle+json; view=default
type Bottle struct {
	// id
	ID int `form:"id" json:"id" xml:"id"`
	// Links to related resources
	Links *BottleLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	// ボトル名
	Name string `form:"name" json:"name" xml:"name"`
	// 数量
	Quantity int `form:"quantity" json:"quantity" xml:"quantity"`
}

// Validate validates the Bottle media type instance.
func (mt *Bottle) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}

	if mt.Links != nil {
		if err2 := mt.Links.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// BottleLinks contains links to related resources of Bottle.
type BottleLinks struct {
	Account *AccountLink `form:"account,omitempty" json:"account,omitempty" xml:"account,omitempty"`
}

// Validate validates the BottleLinks type instance.
func (ut *BottleLinks) Validate() (err error) {
	if ut.Account != nil {
		if err2 := ut.Account.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeBottle decodes the Bottle instance encoded in resp body.
func (c *Client) DecodeBottle(resp *http.Response) (*Bottle, error) {
	var decoded Bottle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// BottleCollection is the media type for an array of Bottle (default view)
//
// Identifier: application/vnd.bottle+json; type=collection; view=default
type BottleCollection []*Bottle

// Validate validates the BottleCollection media type instance.
func (mt BottleCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// BottleLinksArray contains links to related resources of BottleCollection.
type BottleLinksArray []*BottleLinks

// Validate validates the BottleLinksArray type instance.
func (ut BottleLinksArray) Validate() (err error) {
	for _, e := range ut {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeBottleCollection decodes the BottleCollection instance encoded in resp body.
func (c *Client) DecodeBottleCollection(resp *http.Response) (BottleCollection, error) {
	var decoded BottleCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// celler account (default view)
//
// Identifier: application/vnd.category+json; view=default
type Category struct {
	// id
	ID int `form:"id" json:"id" xml:"id"`
	// 名前
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate validates the Category media type instance.
func (mt *Category) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	return
}

// DecodeCategory decodes the Category instance encoded in resp body.
func (c *Client) DecodeCategory(resp *http.Response) (*Category, error) {
	var decoded Category
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Error media type (default view)
//
// Identifier: application/vnd.error+json; view=default
type Error struct {
	Response *ErrorValue `form:"response" json:"response" xml:"response"`
}

// Validate validates the Error media type instance.
func (mt *Error) Validate() (err error) {
	if mt.Response == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "response"))
	}
	if mt.Response != nil {
		if err2 := mt.Response.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeError decodes the Error instance encoded in resp body.
func (c *Client) DecodeError(resp *http.Response) (*Error, error) {
	var decoded Error
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeErrorResponse decodes the ErrorResponse instance encoded in resp body.
func (c *Client) DecodeErrorResponse(resp *http.Response) (*goa.ErrorResponse, error) {
	var decoded goa.ErrorResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// example (default view)
//
// Identifier: application/vnd.integertype+json; view=default
type Integertype struct {
	// id
	ID int `form:"id" json:"id" xml:"id"`
}

// DecodeIntegertype decodes the Integertype instance encoded in resp body.
func (c *Client) DecodeIntegertype(resp *http.Response) (*Integertype, error) {
	var decoded Integertype
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// example (default view)
//
// Identifier: application/vnd.messagetype+json; view=default
type Messagetype struct {
	// メッセージ
	Message string `form:"message" json:"message" xml:"message"`
}

// Validate validates the Messagetype media type instance.
func (mt *Messagetype) Validate() (err error) {
	if mt.Message == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "message"))
	}
	return
}

// DecodeMessagetype decodes the Messagetype instance encoded in resp body.
func (c *Client) DecodeMessagetype(resp *http.Response) (*Messagetype, error) {
	var decoded Messagetype
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// example (default view)
//
// Identifier: application/vnd.usertype+json; view=default
type Usertype struct {
	// メールアドレス
	Email string `form:"email" json:"email" xml:"email"`
	// id
	ID int `form:"id" json:"id" xml:"id"`
	// 名前
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate validates the Usertype media type instance.
func (mt *Usertype) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "email"))
	}
	return
}

// example (tiny view)
//
// Identifier: application/vnd.usertype+json; view=tiny
type UsertypeTiny struct {
	// id
	ID int `form:"id" json:"id" xml:"id"`
	// 名前
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate validates the UsertypeTiny media type instance.
func (mt *UsertypeTiny) Validate() (err error) {

	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	return
}

// DecodeUsertype decodes the Usertype instance encoded in resp body.
func (c *Client) DecodeUsertype(resp *http.Response) (*Usertype, error) {
	var decoded Usertype
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeUsertypeTiny decodes the UsertypeTiny instance encoded in resp body.
func (c *Client) DecodeUsertypeTiny(resp *http.Response) (*UsertypeTiny, error) {
	var decoded UsertypeTiny
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// UsertypeCollection is the media type for an array of Usertype (default view)
//
// Identifier: application/vnd.usertype+json; type=collection; view=default
type UsertypeCollection []*Usertype

// Validate validates the UsertypeCollection media type instance.
func (mt UsertypeCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// UsertypeCollection is the media type for an array of Usertype (tiny view)
//
// Identifier: application/vnd.usertype+json; type=collection; view=tiny
type UsertypeTinyCollection []*UsertypeTiny

// Validate validates the UsertypeTinyCollection media type instance.
func (mt UsertypeTinyCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeUsertypeCollection decodes the UsertypeCollection instance encoded in resp body.
func (c *Client) DecodeUsertypeCollection(resp *http.Response) (UsertypeCollection, error) {
	var decoded UsertypeCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeUsertypeTinyCollection decodes the UsertypeTinyCollection instance encoded in resp body.
func (c *Client) DecodeUsertypeTinyCollection(resp *http.Response) (UsertypeTinyCollection, error) {
	var decoded UsertypeTinyCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// example (default view)
//
// Identifier: application/vnd.validationtype+json; view=default
type Validationtype struct {
	// デフォルト値
	DefaultType string `form:"defaultType" json:"defaultType" xml:"defaultType"`
	// メールアドレス
	Email string `form:"email" json:"email" xml:"email"`
	// 列挙型
	EnumType string `form:"enumType" json:"enumType" xml:"enumType"`
	// id
	ID int `form:"id" json:"id" xml:"id"`
	// 数字（1〜10）
	IntegerType int `form:"integerType" json:"integerType" xml:"integerType"`
	// デフォルト値
	Reg string `form:"reg" json:"reg" xml:"reg"`
	// 文字（1~10文字）
	StringType string `form:"stringType" json:"stringType" xml:"stringType"`
}

// Validate validates the Validationtype media type instance.
func (mt *Validationtype) Validate() (err error) {

	if mt.StringType == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "stringType"))
	}
	if mt.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "email"))
	}
	if mt.EnumType == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "enumType"))
	}
	if mt.DefaultType == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "defaultType"))
	}
	if mt.Reg == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "reg"))
	}
	return
}

// DecodeValidationtype decodes the Validationtype instance encoded in resp body.
func (c *Client) DecodeValidationtype(resp *http.Response) (*Validationtype, error) {
	var decoded Validationtype
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
