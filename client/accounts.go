// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "goa simple sample": accounts Resource Client
//
// Command:
// $ goagen
// --design=github.com/pei0804/goa-simple-sample/design
// --out=$(GOPATH)/src/github.com/pei0804/goa-simple-sample
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// AddAccountsPayload is the accounts add action payload.
type AddAccountsPayload struct {
	// email
	Email string `form:"email" json:"email" xml:"email"`
	// 名前
	Name string `form:"name" json:"name" xml:"name"`
}

// AddAccountsPath computes a request path to the add action of accounts.
func AddAccountsPath() string {

	return fmt.Sprintf("/api/v1/accounts/")
}

// 追加
func (c *Client) AddAccounts(ctx context.Context, path string, payload *AddAccountsPayload, contentType string) (*http.Response, error) {
	req, err := c.NewAddAccountsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddAccountsRequest create the request corresponding to the add action endpoint of the accounts resource.
func (c *Client) NewAddAccountsRequest(ctx context.Context, path string, payload *AddAccountsPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteAccountsPath computes a request path to the delete action of accounts.
func DeleteAccountsPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/api/v1/accounts/%s", param0)
}

// 削除
func (c *Client) DeleteAccounts(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteAccountsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteAccountsRequest create the request corresponding to the delete action endpoint of the accounts resource.
func (c *Client) NewDeleteAccountsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListAccountsPath computes a request path to the list action of accounts.
func ListAccountsPath() string {

	return fmt.Sprintf("/api/v1/accounts/")
}

// 複数
func (c *Client) ListAccounts(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListAccountsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListAccountsRequest create the request corresponding to the list action endpoint of the accounts resource.
func (c *Client) NewListAccountsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowAccountsPath computes a request path to the show action of accounts.
func ShowAccountsPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/api/v1/accounts/%s", param0)
}

// 単数
func (c *Client) ShowAccounts(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowAccountsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowAccountsRequest create the request corresponding to the show action endpoint of the accounts resource.
func (c *Client) NewShowAccountsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateAccountsPayload is the accounts update action payload.
type UpdateAccountsPayload struct {
	// email
	Email string `form:"email" json:"email" xml:"email"`
	// 名前
	Name string `form:"name" json:"name" xml:"name"`
}

// UpdateAccountsPath computes a request path to the update action of accounts.
func UpdateAccountsPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/api/v1/accounts/%s", param0)
}

// 更新
func (c *Client) UpdateAccounts(ctx context.Context, path string, payload *UpdateAccountsPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateAccountsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateAccountsRequest create the request corresponding to the update action endpoint of the accounts resource.
func (c *Client) NewUpdateAccountsRequest(ctx context.Context, path string, payload *UpdateAccountsPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}
