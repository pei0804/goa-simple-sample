// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/tikasan/goa-simple-sample/design
// --out=$(GOPATH)/src/github.com/tikasan/goa-simple-sample
// --version=v1.1.0
//
// API "goa simple sample": method Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
)

// MethodMethodPath computes a request path to the method action of method.
func MethodMethodPath() string {

	return fmt.Sprintf("/api/v1/method/get")
}

// MethodMethodPath2 computes a request path to the method action of method.
func MethodMethodPath2() string {

	return fmt.Sprintf("/api/v1/method/post")
}

// MethodMethodPath3 computes a request path to the method action of method.
func MethodMethodPath3() string {

	return fmt.Sprintf("/api/v1/method/delete")
}

// MethodMethodPath4 computes a request path to the method action of method.
func MethodMethodPath4() string {

	return fmt.Sprintf("/api/v1/method/put")
}

// HTTPメソッド
func (c *Client) MethodMethod(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewMethodMethodRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewMethodMethodRequest create the request corresponding to the method action endpoint of the method resource.
func (c *Client) NewMethodMethodRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "https"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
