// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "goa simple sample": Application User Types
//
// Command:
// $ goagen
// --design=github.com/tikasan/goa-simple-sample/design
// --out=$(GOPATH)/src/github.com/tikasan/goa-simple-sample
// --version=v1.2.0-dirty

package app

import (
	"github.com/goadesign/goa"
)

// data user type.
type data struct {
	Body  *string `form:"body,omitempty" json:"body,omitempty" xml:"body,omitempty"`
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
}

// Validate validates the data type instance.
func (ut *data) Validate() (err error) {
	if ut.Title == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "title"))
	}
	if ut.Body == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "body"))
	}
	return
}

// Publicize creates Data from data
func (ut *data) Publicize() *Data {
	var pub Data
	if ut.Body != nil {
		pub.Body = *ut.Body
	}
	if ut.Title != nil {
		pub.Title = *ut.Title
	}
	return &pub
}

// Data user type.
type Data struct {
	Body  string `form:"body" json:"body" xml:"body"`
	Title string `form:"title" json:"title" xml:"title"`
}

// Validate validates the Data type instance.
func (ut *Data) Validate() (err error) {
	if ut.Title == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "title"))
	}
	if ut.Body == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "body"))
	}
	return
}

// errorValue user type.
type errorValue struct {
	Code   *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Detail *string `form:"detail,omitempty" json:"detail,omitempty" xml:"detail,omitempty"`
	Status *int    `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// Validate validates the errorValue type instance.
func (ut *errorValue) Validate() (err error) {
	if ut.Status == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "status"))
	}
	if ut.Code == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "code"))
	}
	if ut.Detail == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "detail"))
	}
	return
}

// Publicize creates ErrorValue from errorValue
func (ut *errorValue) Publicize() *ErrorValue {
	var pub ErrorValue
	if ut.Code != nil {
		pub.Code = *ut.Code
	}
	if ut.Detail != nil {
		pub.Detail = *ut.Detail
	}
	if ut.Status != nil {
		pub.Status = *ut.Status
	}
	return &pub
}

// ErrorValue user type.
type ErrorValue struct {
	Code   string `form:"code" json:"code" xml:"code"`
	Detail string `form:"detail" json:"detail" xml:"detail"`
	Status int    `form:"status" json:"status" xml:"status"`
}

// Validate validates the ErrorValue type instance.
func (ut *ErrorValue) Validate() (err error) {

	if ut.Code == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "code"))
	}
	if ut.Detail == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "detail"))
	}
	return
}

// ok user type.
type ok struct {
	Status *int `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// Validate validates the ok type instance.
func (ut *ok) Validate() (err error) {
	if ut.Status == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "status"))
	}
	return
}

// Publicize creates OK from ok
func (ut *ok) Publicize() *OK {
	var pub OK
	if ut.Status != nil {
		pub.Status = *ut.Status
	}
	return &pub
}

// OK user type.
type OK struct {
	Status int `form:"status" json:"status" xml:"status"`
}
