// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "goa simple sample": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/tikasan/goa-simple-sample/design
// --out=$(GOPATH)/src/github.com/tikasan/goa-simple-sample
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
	"unicode/utf8"
)

// AddAccountsContext provides the accounts add action context.
type AddAccountsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Email string
	Name  string
}

// NewAddAccountsContext parses the incoming request URL and body, performs validations and creates the
// context used by the accounts controller add action.
func NewAddAccountsContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddAccountsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddAccountsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEmail := req.Params["email"]
	if len(paramEmail) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("email"))
	} else {
		rawEmail := paramEmail[0]
		rctx.Email = rawEmail
		if err2 := goa.ValidateFormat(goa.FormatEmail, rctx.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`email`, rctx.Email, goa.FormatEmail, err2))
		}
	}
	paramName := req.Params["name"]
	if len(paramName) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("name"))
	} else {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddAccountsContext) OK(r *Account) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.account+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddAccountsContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteAccountsContext provides the accounts delete action context.
type DeleteAccountsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewDeleteAccountsContext parses the incoming request URL and body, performs validations and creates the
// context used by the accounts controller delete action.
func NewDeleteAccountsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteAccountsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteAccountsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteAccountsContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteAccountsContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteAccountsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListAccountsContext provides the accounts list action context.
type ListAccountsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListAccountsContext parses the incoming request URL and body, performs validations and creates the
// context used by the accounts controller list action.
func NewListAccountsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListAccountsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListAccountsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListAccountsContext) OK(r AccountCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.account+json; type=collection")
	if r == nil {
		r = AccountCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListAccountsContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ShowAccountsContext provides the accounts show action context.
type ShowAccountsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewShowAccountsContext parses the incoming request URL and body, performs validations and creates the
// context used by the accounts controller show action.
func NewShowAccountsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowAccountsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowAccountsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowAccountsContext) OK(r *Account) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.account+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowAccountsContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowAccountsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateAccountsContext provides the accounts update action context.
type UpdateAccountsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Email string
	ID    int
	Name  string
}

// NewUpdateAccountsContext parses the incoming request URL and body, performs validations and creates the
// context used by the accounts controller update action.
func NewUpdateAccountsContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateAccountsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateAccountsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEmail := req.Params["email"]
	if len(paramEmail) == 0 {
		rctx.Email = ""
	} else {
		rawEmail := paramEmail[0]
		rctx.Email = rawEmail
		if err2 := goa.ValidateFormat(goa.FormatEmail, rctx.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`email`, rctx.Email, goa.FormatEmail, err2))
		}
	}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	paramName := req.Params["name"]
	if len(paramName) == 0 {
		rctx.Name = ""
	} else {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateAccountsContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateAccountsContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateAccountsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// AddAccountsDataContext provides the accounts_data add action context.
type AddAccountsDataContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Email string
	Name  string
}

// NewAddAccountsDataContext parses the incoming request URL and body, performs validations and creates the
// context used by the accounts_data controller add action.
func NewAddAccountsDataContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddAccountsDataContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddAccountsDataContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEmail := req.Params["email"]
	if len(paramEmail) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("email"))
	} else {
		rawEmail := paramEmail[0]
		rctx.Email = rawEmail
		if err2 := goa.ValidateFormat(goa.FormatEmail, rctx.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`email`, rctx.Email, goa.FormatEmail, err2))
		}
	}
	paramName := req.Params["name"]
	if len(paramName) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("name"))
	} else {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddAccountsDataContext) OK(r *Accountmedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.accountmedia+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddAccountsDataContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteAccountsDataContext provides the accounts_data delete action context.
type DeleteAccountsDataContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewDeleteAccountsDataContext parses the incoming request URL and body, performs validations and creates the
// context used by the accounts_data controller delete action.
func NewDeleteAccountsDataContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteAccountsDataContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteAccountsDataContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteAccountsDataContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteAccountsDataContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteAccountsDataContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListAccountsDataContext provides the accounts_data list action context.
type ListAccountsDataContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListAccountsDataContext parses the incoming request URL and body, performs validations and creates the
// context used by the accounts_data controller list action.
func NewListAccountsDataContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListAccountsDataContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListAccountsDataContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListAccountsDataContext) OK(r *Accountmedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.accountmedia+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListAccountsDataContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ShowAccountsDataContext provides the accounts_data show action context.
type ShowAccountsDataContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewShowAccountsDataContext parses the incoming request URL and body, performs validations and creates the
// context used by the accounts_data controller show action.
func NewShowAccountsDataContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowAccountsDataContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowAccountsDataContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowAccountsDataContext) OK(r *Accountmedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.accountmedia+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowAccountsDataContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowAccountsDataContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateAccountsDataContext provides the accounts_data update action context.
type UpdateAccountsDataContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Email string
	ID    int
	Name  string
}

// NewUpdateAccountsDataContext parses the incoming request URL and body, performs validations and creates the
// context used by the accounts_data controller update action.
func NewUpdateAccountsDataContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateAccountsDataContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateAccountsDataContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEmail := req.Params["email"]
	if len(paramEmail) == 0 {
		rctx.Email = ""
	} else {
		rawEmail := paramEmail[0]
		rctx.Email = rawEmail
		if err2 := goa.ValidateFormat(goa.FormatEmail, rctx.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`email`, rctx.Email, goa.FormatEmail, err2))
		}
	}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	paramName := req.Params["name"]
	if len(paramName) == 0 {
		rctx.Name = ""
	} else {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateAccountsDataContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateAccountsDataContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateAccountsDataContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// HelloActionsContext provides the actions hello action context.
type HelloActionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name string
}

// NewHelloActionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the actions controller hello action.
func NewHelloActionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*HelloActionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := HelloActionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) == 0 {
		rctx.Name = ""
	} else {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *HelloActionsContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *HelloActionsContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// IDActionsContext provides the actions id action context.
type IDActionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewIDActionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the actions controller id action.
func NewIDActionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*IDActionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := IDActionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *IDActionsContext) OK(r *Integer) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.integer+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *IDActionsContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *IDActionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// PingActionsContext provides the actions ping action context.
type PingActionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewPingActionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the actions controller ping action.
func NewPingActionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*PingActionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PingActionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *PingActionsContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *PingActionsContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// AddBottlesContext provides the bottles add action context.
type AddBottlesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AccountID int
	Name      string
	Quantity  int
}

// NewAddBottlesContext parses the incoming request URL and body, performs validations and creates the
// context used by the bottles controller add action.
func NewAddBottlesContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddBottlesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddBottlesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAccountID := req.Params["account_id"]
	if len(paramAccountID) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("account_id"))
	} else {
		rawAccountID := paramAccountID[0]
		if accountID, err2 := strconv.Atoi(rawAccountID); err2 == nil {
			rctx.AccountID = accountID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("account_id", rawAccountID, "integer"))
		}
	}
	paramName := req.Params["name"]
	if len(paramName) == 0 {
		rctx.Name = ""
	} else {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramQuantity := req.Params["quantity"]
	if len(paramQuantity) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("quantity"))
	} else {
		rawQuantity := paramQuantity[0]
		if quantity, err2 := strconv.Atoi(rawQuantity); err2 == nil {
			rctx.Quantity = quantity
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("quantity", rawQuantity, "integer"))
		}
	}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *AddBottlesContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddBottlesContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteBottlesContext provides the bottles delete action context.
type DeleteBottlesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewDeleteBottlesContext parses the incoming request URL and body, performs validations and creates the
// context used by the bottles controller delete action.
func NewDeleteBottlesContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteBottlesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteBottlesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteBottlesContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteBottlesContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteBottlesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListBottlesContext provides the bottles list action context.
type ListBottlesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListBottlesContext parses the incoming request URL and body, performs validations and creates the
// context used by the bottles controller list action.
func NewListBottlesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBottlesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBottlesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBottlesContext) OK(r BottleCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.bottle+json; type=collection")
	if r == nil {
		r = BottleCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKRelation sends a HTTP response with status code 200.
func (ctx *ListBottlesContext) OKRelation(r BottleRelationCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.bottle+json; type=collection")
	if r == nil {
		r = BottleRelationCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListBottlesContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ListRelationBottlesContext provides the bottles listRelation action context.
type ListRelationBottlesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListRelationBottlesContext parses the incoming request URL and body, performs validations and creates the
// context used by the bottles controller listRelation action.
func NewListRelationBottlesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListRelationBottlesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListRelationBottlesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListRelationBottlesContext) OK(r BottleCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.bottle+json; type=collection")
	if r == nil {
		r = BottleCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKRelation sends a HTTP response with status code 200.
func (ctx *ListRelationBottlesContext) OKRelation(r BottleRelationCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.bottle+json; type=collection")
	if r == nil {
		r = BottleRelationCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListRelationBottlesContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ShowBottlesContext provides the bottles show action context.
type ShowBottlesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewShowBottlesContext parses the incoming request URL and body, performs validations and creates the
// context used by the bottles controller show action.
func NewShowBottlesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowBottlesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowBottlesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowBottlesContext) OK(r *Bottle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.bottle+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKRelation sends a HTTP response with status code 200.
func (ctx *ShowBottlesContext) OKRelation(r *BottleRelation) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.bottle+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowBottlesContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowBottlesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateBottlesContext provides the bottles update action context.
type UpdateBottlesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID       int
	Name     string
	Quantity int
}

// NewUpdateBottlesContext parses the incoming request URL and body, performs validations and creates the
// context used by the bottles controller update action.
func NewUpdateBottlesContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateBottlesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateBottlesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	paramName := req.Params["name"]
	if len(paramName) == 0 {
		rctx.Name = ""
	} else {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramQuantity := req.Params["quantity"]
	if len(paramQuantity) == 0 {
		rctx.Quantity = 0
	} else {
		rawQuantity := paramQuantity[0]
		if quantity, err2 := strconv.Atoi(rawQuantity); err2 == nil {
			rctx.Quantity = quantity
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("quantity", rawQuantity, "integer"))
		}
		if rctx.Quantity < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`quantity`, rctx.Quantity, 0, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateBottlesContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateBottlesContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateBottlesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// AddBottlesDataContext provides the bottles_data add action context.
type AddBottlesDataContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AccountID int
	Name      string
	Quantity  int
}

// NewAddBottlesDataContext parses the incoming request URL and body, performs validations and creates the
// context used by the bottles_data controller add action.
func NewAddBottlesDataContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddBottlesDataContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddBottlesDataContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAccountID := req.Params["account_id"]
	if len(paramAccountID) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("account_id"))
	} else {
		rawAccountID := paramAccountID[0]
		if accountID, err2 := strconv.Atoi(rawAccountID); err2 == nil {
			rctx.AccountID = accountID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("account_id", rawAccountID, "integer"))
		}
	}
	paramName := req.Params["name"]
	if len(paramName) == 0 {
		rctx.Name = ""
	} else {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramQuantity := req.Params["quantity"]
	if len(paramQuantity) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("quantity"))
	} else {
		rawQuantity := paramQuantity[0]
		if quantity, err2 := strconv.Atoi(rawQuantity); err2 == nil {
			rctx.Quantity = quantity
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("quantity", rawQuantity, "integer"))
		}
	}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *AddBottlesDataContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddBottlesDataContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteBottlesDataContext provides the bottles_data delete action context.
type DeleteBottlesDataContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewDeleteBottlesDataContext parses the incoming request URL and body, performs validations and creates the
// context used by the bottles_data controller delete action.
func NewDeleteBottlesDataContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteBottlesDataContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteBottlesDataContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteBottlesDataContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteBottlesDataContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteBottlesDataContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListBottlesDataContext provides the bottles_data list action context.
type ListBottlesDataContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListBottlesDataContext parses the incoming request URL and body, performs validations and creates the
// context used by the bottles_data controller list action.
func NewListBottlesDataContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListBottlesDataContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListBottlesDataContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListBottlesDataContext) OK(r *Bottlemedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.bottlemedia+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListBottlesDataContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ShowBottlesDataContext provides the bottles_data show action context.
type ShowBottlesDataContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewShowBottlesDataContext parses the incoming request URL and body, performs validations and creates the
// context used by the bottles_data controller show action.
func NewShowBottlesDataContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowBottlesDataContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowBottlesDataContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowBottlesDataContext) OK(r *Bottlemedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.bottlemedia+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowBottlesDataContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowBottlesDataContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateBottlesDataContext provides the bottles_data update action context.
type UpdateBottlesDataContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID       int
	Name     string
	Quantity int
}

// NewUpdateBottlesDataContext parses the incoming request URL and body, performs validations and creates the
// context used by the bottles_data controller update action.
func NewUpdateBottlesDataContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateBottlesDataContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateBottlesDataContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	paramName := req.Params["name"]
	if len(paramName) == 0 {
		rctx.Name = ""
	} else {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	paramQuantity := req.Params["quantity"]
	if len(paramQuantity) == 0 {
		rctx.Quantity = 0
	} else {
		rawQuantity := paramQuantity[0]
		if quantity, err2 := strconv.Atoi(rawQuantity); err2 == nil {
			rctx.Quantity = quantity
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("quantity", rawQuantity, "integer"))
		}
		if rctx.Quantity < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`quantity`, rctx.Quantity, 0, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateBottlesDataContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateBottlesDataContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateBottlesDataContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// EtcMethodContext provides the method etc action context.
type EtcMethodContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID   int
	Type int
}

// NewEtcMethodContext parses the incoming request URL and body, performs validations and creates the
// context used by the method controller etc action.
func NewEtcMethodContext(ctx context.Context, r *http.Request, service *goa.Service) (*EtcMethodContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := EtcMethodContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	paramType := req.Params["type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		if type_, err2 := strconv.Atoi(rawType); err2 == nil {
			rctx.Type = type_
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("type", rawType, "integer"))
		}
		if !(rctx.Type == 1 || rctx.Type == 2 || rctx.Type == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`type`, rctx.Type, []interface{}{1, 2, 3}))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *EtcMethodContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "plain/text")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *EtcMethodContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// FollowMethodContext provides the method follow action context.
type FollowMethodContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewFollowMethodContext parses the incoming request URL and body, performs validations and creates the
// context used by the method controller follow action.
func NewFollowMethodContext(ctx context.Context, r *http.Request, service *goa.Service) (*FollowMethodContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := FollowMethodContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *FollowMethodContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *FollowMethodContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ListMethodContext provides the method list action context.
type ListMethodContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListMethodContext parses the incoming request URL and body, performs validations and creates the
// context used by the method controller list action.
func NewListMethodContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListMethodContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListMethodContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListMethodContext) OK(r UserCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json; type=collection")
	if r == nil {
		r = UserCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ListMethodContext) OKTiny(r UserTinyCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json; type=collection")
	if r == nil {
		r = UserTinyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListMethodContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// MethodMethodContext provides the method method action context.
type MethodMethodContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewMethodMethodContext parses the incoming request URL and body, performs validations and creates the
// context used by the method controller method action.
func NewMethodMethodContext(ctx context.Context, r *http.Request, service *goa.Service) (*MethodMethodContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := MethodMethodContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *MethodMethodContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *MethodMethodContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ArrayResponseContext provides the response array action context.
type ArrayResponseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewArrayResponseContext parses the incoming request URL and body, performs validations and creates the
// context used by the response controller array action.
func NewArrayResponseContext(ctx context.Context, r *http.Request, service *goa.Service) (*ArrayResponseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ArrayResponseContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ArrayResponseContext) OK(r []int) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ArrayResponseContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// HashResponseContext provides the response hash action context.
type HashResponseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewHashResponseContext parses the incoming request URL and body, performs validations and creates the
// context used by the response controller hash action.
func NewHashResponseContext(ctx context.Context, r *http.Request, service *goa.Service) (*HashResponseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := HashResponseContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *HashResponseContext) OK(r map[string]int) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *HashResponseContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ListResponseContext provides the response list action context.
type ListResponseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListResponseContext parses the incoming request URL and body, performs validations and creates the
// context used by the response controller list action.
func NewListResponseContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListResponseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListResponseContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListResponseContext) OK(r UserCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json; type=collection")
	if r == nil {
		r = UserCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ListResponseContext) OKTiny(r UserTinyCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json; type=collection")
	if r == nil {
		r = UserTinyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListResponseContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NestedResponseContext provides the response nested action context.
type NestedResponseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Test string
}

// NewNestedResponseContext parses the incoming request URL and body, performs validations and creates the
// context used by the response controller nested action.
func NewNestedResponseContext(ctx context.Context, r *http.Request, service *goa.Service) (*NestedResponseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := NestedResponseContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramTest := req.Params["test"]
	if len(paramTest) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("test"))
	} else {
		rawTest := paramTest[0]
		rctx.Test = rawTest
		if utf8.RuneCountInString(rctx.Test) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`test`, rctx.Test, utf8.RuneCountInString(rctx.Test), 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *NestedResponseContext) OK(r *Article) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.article+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *NestedResponseContext) BadRequest(r *Error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.error+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ShowResponseContext provides the response show action context.
type ShowResponseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID string
}

// NewShowResponseContext parses the incoming request URL and body, performs validations and creates the
// context used by the response controller show action.
func NewShowResponseContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowResponseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowResponseContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowResponseContext) OK(r *User) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ShowResponseContext) OKTiny(r *UserTiny) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowResponseContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// SecuritySecurityContext provides the security security action context.
type SecuritySecurityContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewSecuritySecurityContext parses the incoming request URL and body, performs validations and creates the
// context used by the security controller security action.
func NewSecuritySecurityContext(ctx context.Context, r *http.Request, service *goa.Service) (*SecuritySecurityContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SecuritySecurityContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SecuritySecurityContext) OK(r *Message) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.message+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SecuritySecurityContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SecuritySecurityContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// ValidationValidationContext provides the validation validation action context.
type ValidationValidationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	DefaultType string
	Email       string
	EnumType    string
	ID          int
	IntegerType int
	Reg         string
	StringType  string
}

// NewValidationValidationContext parses the incoming request URL and body, performs validations and creates the
// context used by the validation controller validation action.
func NewValidationValidationContext(ctx context.Context, r *http.Request, service *goa.Service) (*ValidationValidationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ValidationValidationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramDefaultType := req.Params["defaultType"]
	if len(paramDefaultType) == 0 {
		rctx.DefaultType = "でふぉ"
	} else {
		rawDefaultType := paramDefaultType[0]
		rctx.DefaultType = rawDefaultType
	}
	paramEmail := req.Params["email"]
	if len(paramEmail) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("email"))
	} else {
		rawEmail := paramEmail[0]
		rctx.Email = rawEmail
		if err2 := goa.ValidateFormat(goa.FormatEmail, rctx.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`email`, rctx.Email, goa.FormatEmail, err2))
		}
	}
	paramEnumType := req.Params["enumType"]
	if len(paramEnumType) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("enumType"))
	} else {
		rawEnumType := paramEnumType[0]
		rctx.EnumType = rawEnumType
		if !(rctx.EnumType == "A" || rctx.EnumType == "B" || rctx.EnumType == "C") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`enumType`, rctx.EnumType, []interface{}{"A", "B", "C"}))
		}
	}
	paramID := req.Params["id"]
	if len(paramID) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("id"))
	} else {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	paramIntegerType := req.Params["integerType"]
	if len(paramIntegerType) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("integerType"))
	} else {
		rawIntegerType := paramIntegerType[0]
		if integerType, err2 := strconv.Atoi(rawIntegerType); err2 == nil {
			rctx.IntegerType = integerType
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("integerType", rawIntegerType, "integer"))
		}
		if rctx.IntegerType < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`integerType`, rctx.IntegerType, 0, true))
		}
		if rctx.IntegerType > 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`integerType`, rctx.IntegerType, 10, false))
		}
	}
	paramReg := req.Params["reg"]
	if len(paramReg) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("reg"))
	} else {
		rawReg := paramReg[0]
		rctx.Reg = rawReg
		if ok := goa.ValidatePattern(`^[a-z0-9]{5}$`, rctx.Reg); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`reg`, rctx.Reg, `^[a-z0-9]{5}$`))
		}
	}
	paramStringType := req.Params["stringType"]
	if len(paramStringType) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("stringType"))
	} else {
		rawStringType := paramStringType[0]
		rctx.StringType = rawStringType
		if utf8.RuneCountInString(rctx.StringType) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`stringType`, rctx.StringType, utf8.RuneCountInString(rctx.StringType), 1, true))
		}
		if utf8.RuneCountInString(rctx.StringType) > 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`stringType`, rctx.StringType, utf8.RuneCountInString(rctx.StringType), 10, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ValidationValidationContext) OK(r *Validation) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.validation+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ValidationValidationContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}
