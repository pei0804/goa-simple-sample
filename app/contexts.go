// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/tikasan/goa-simple-sample/design
// --out=$(GOPATH)/src/github.com/tikasan/goa-simple-sample
// --version=v1.1.0
//
// API "goa simple sample": Application Contexts
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
	"net/http"
	"strconv"
	"unicode/utf8"
)

// IDActionsContext provides the actions ID action context.
type IDActionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewIDActionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the actions controller ID action.
func NewIDActionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*IDActionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := IDActionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["ID"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("ID", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *IDActionsContext) OK(r *Integertype) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.integertype+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *IDActionsContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *IDActionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// MainActionsContext provides the actions main action context.
type MainActionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewMainActionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the actions controller main action.
func NewMainActionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*MainActionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := MainActionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *MainActionsContext) OK(r *Messagetype) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.messagetype+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *MainActionsContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// SubActionsContext provides the actions sub action context.
type SubActionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name string
}

// NewSubActionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the actions controller sub action.
func NewSubActionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*SubActionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SubActionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) == 0 {
		rctx.Name = ""
	} else {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SubActionsContext) OK(r *Messagetype) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.messagetype+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SubActionsContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ArrayArrayContext provides the array array action context.
type ArrayArrayContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewArrayArrayContext parses the incoming request URL and body, performs validations and creates the
// context used by the array controller array action.
func NewArrayArrayContext(ctx context.Context, r *http.Request, service *goa.Service) (*ArrayArrayContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ArrayArrayContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ArrayArrayContext) OK(r ArraytypeCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.arraytype+json; type=collection")
	if r == nil {
		r = ArraytypeCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ArrayArrayContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// MethodMethodContext provides the method method action context.
type MethodMethodContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewMethodMethodContext parses the incoming request URL and body, performs validations and creates the
// context used by the method controller method action.
func NewMethodMethodContext(ctx context.Context, r *http.Request, service *goa.Service) (*MethodMethodContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := MethodMethodContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *MethodMethodContext) OK(r *Messagetype) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.messagetype+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *MethodMethodContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// SecuritySecurityContext provides the security security action context.
type SecuritySecurityContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewSecuritySecurityContext parses the incoming request URL and body, performs validations and creates the
// context used by the security controller security action.
func NewSecuritySecurityContext(ctx context.Context, r *http.Request, service *goa.Service) (*SecuritySecurityContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SecuritySecurityContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SecuritySecurityContext) OK(r *Messagetype) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.messagetype+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SecuritySecurityContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SecuritySecurityContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// ValidationValidationContext provides the validation validation action context.
type ValidationValidationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID      *int
	Default string
	Email   *string
	Enum    *string
	Integer *int
	String  *string
}

// NewValidationValidationContext parses the incoming request URL and body, performs validations and creates the
// context used by the validation controller validation action.
func NewValidationValidationContext(ctx context.Context, r *http.Request, service *goa.Service) (*ValidationValidationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ValidationValidationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["ID"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			tmp3 := id
			tmp2 := &tmp3
			rctx.ID = tmp2
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("ID", rawID, "integer"))
		}
	}
	paramDefault := req.Params["default"]
	if len(paramDefault) == 0 {
		rctx.Default = "でふぉ"
	} else {
		rawDefault := paramDefault[0]
		rctx.Default = rawDefault
	}
	paramEmail := req.Params["email"]
	if len(paramEmail) > 0 {
		rawEmail := paramEmail[0]
		rctx.Email = &rawEmail
		if rctx.Email != nil {
			if err2 := goa.ValidateFormat(goa.FormatEmail, *rctx.Email); err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFormatError(`email`, *rctx.Email, goa.FormatEmail, err2))
			}
		}
	}
	paramEnum := req.Params["enum"]
	if len(paramEnum) > 0 {
		rawEnum := paramEnum[0]
		rctx.Enum = &rawEnum
		if rctx.Enum != nil {
			if !(*rctx.Enum == "A" || *rctx.Enum == "B" || *rctx.Enum == "C") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`enum`, *rctx.Enum, []interface{}{"A", "B", "C"}))
			}
		}
	}
	paramInteger := req.Params["integer"]
	if len(paramInteger) > 0 {
		rawInteger := paramInteger[0]
		if integer, err2 := strconv.Atoi(rawInteger); err2 == nil {
			tmp5 := integer
			tmp4 := &tmp5
			rctx.Integer = tmp4
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("integer", rawInteger, "integer"))
		}
		if rctx.Integer != nil {
			if *rctx.Integer < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`integer`, *rctx.Integer, 0, true))
			}
		}
		if rctx.Integer != nil {
			if *rctx.Integer > 10 {
				err = goa.MergeErrors(err, goa.InvalidRangeError(`integer`, *rctx.Integer, 10, false))
			}
		}
	}
	paramString := req.Params["string"]
	if len(paramString) > 0 {
		rawString := paramString[0]
		rctx.String = &rawString
		if rctx.String != nil {
			if utf8.RuneCountInString(*rctx.String) < 1 {
				err = goa.MergeErrors(err, goa.InvalidLengthError(`string`, *rctx.String, utf8.RuneCountInString(*rctx.String), 1, true))
			}
		}
		if rctx.String != nil {
			if utf8.RuneCountInString(*rctx.String) > 10 {
				err = goa.MergeErrors(err, goa.InvalidLengthError(`string`, *rctx.String, utf8.RuneCountInString(*rctx.String), 10, false))
			}
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ValidationValidationContext) OK(r *Validationtype) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.validationtype+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ValidationValidationContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ViewViewContext provides the view view action context.
type ViewViewContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewViewViewContext parses the incoming request URL and body, performs validations and creates the
// context used by the view controller view action.
func NewViewViewContext(ctx context.Context, r *http.Request, service *goa.Service) (*ViewViewContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ViewViewContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ViewViewContext) OK(r *Viewtype) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.viewtype+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ViewViewContext) OKTiny(r *ViewtypeTiny) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.viewtype+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ViewViewContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}
