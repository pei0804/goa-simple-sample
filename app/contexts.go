// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/tikasan/goa-simple-sample/design
// --out=$(GOPATH)/src/github.com/tikasan/goa-simple-sample
// --version=v1.1.0
//
// API "goa simple sample": Application Contexts
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
	"net/http"
	"strconv"
	"unicode/utf8"
)

// IDActionsContext provides the actions ID action context.
type IDActionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewIDActionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the actions controller ID action.
func NewIDActionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*IDActionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := IDActionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["ID"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("ID", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *IDActionsContext) OK(r *Integertype) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.integertype+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *IDActionsContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *IDActionsContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// HelloActionsContext provides the actions hello action context.
type HelloActionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Name string
}

// NewHelloActionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the actions controller hello action.
func NewHelloActionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*HelloActionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := HelloActionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramName := req.Params["name"]
	if len(paramName) == 0 {
		rctx.Name = ""
	} else {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *HelloActionsContext) OK(r *Messagetype) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.messagetype+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *HelloActionsContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// PingActionsContext provides the actions ping action context.
type PingActionsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewPingActionsContext parses the incoming request URL and body, performs validations and creates the
// context used by the actions controller ping action.
func NewPingActionsContext(ctx context.Context, r *http.Request, service *goa.Service) (*PingActionsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := PingActionsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *PingActionsContext) OK(r *Messagetype) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.messagetype+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *PingActionsContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// EtcMethodContext provides the method etc action context.
type EtcMethodContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID   int
	Type int
}

// NewEtcMethodContext parses the incoming request URL and body, performs validations and creates the
// context used by the method controller etc action.
func NewEtcMethodContext(ctx context.Context, r *http.Request, service *goa.Service) (*EtcMethodContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := EtcMethodContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["ID"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("ID", rawID, "integer"))
		}
	}
	paramType := req.Params["type"]
	if len(paramType) > 0 {
		rawType := paramType[0]
		if type_, err2 := strconv.Atoi(rawType); err2 == nil {
			rctx.Type = type_
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("type", rawType, "integer"))
		}
		if !(rctx.Type == 1 || rctx.Type == 2 || rctx.Type == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`type`, rctx.Type, []interface{}{1, 2, 3}))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *EtcMethodContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "plain/text")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *EtcMethodContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// FollowMethodContext provides the method follow action context.
type FollowMethodContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewFollowMethodContext parses the incoming request URL and body, performs validations and creates the
// context used by the method controller follow action.
func NewFollowMethodContext(ctx context.Context, r *http.Request, service *goa.Service) (*FollowMethodContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := FollowMethodContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *FollowMethodContext) OK(r *Messagetype) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.messagetype+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *FollowMethodContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ListMethodContext provides the method list action context.
type ListMethodContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListMethodContext parses the incoming request URL and body, performs validations and creates the
// context used by the method controller list action.
func NewListMethodContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListMethodContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListMethodContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListMethodContext) OK(r UsertypeCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.usertype+json; type=collection")
	if r == nil {
		r = UsertypeCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ListMethodContext) OKTiny(r UsertypeTinyCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.usertype+json; type=collection")
	if r == nil {
		r = UsertypeTinyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListMethodContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// MethodMethodContext provides the method method action context.
type MethodMethodContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewMethodMethodContext parses the incoming request URL and body, performs validations and creates the
// context used by the method controller method action.
func NewMethodMethodContext(ctx context.Context, r *http.Request, service *goa.Service) (*MethodMethodContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := MethodMethodContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *MethodMethodContext) OK(r *Messagetype) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.messagetype+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *MethodMethodContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ArrayResponseContext provides the response array action context.
type ArrayResponseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewArrayResponseContext parses the incoming request URL and body, performs validations and creates the
// context used by the response controller array action.
func NewArrayResponseContext(ctx context.Context, r *http.Request, service *goa.Service) (*ArrayResponseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ArrayResponseContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ArrayResponseContext) OK(r []int) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ArrayResponseContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// HashResponseContext provides the response hash action context.
type HashResponseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewHashResponseContext parses the incoming request URL and body, performs validations and creates the
// context used by the response controller hash action.
func NewHashResponseContext(ctx context.Context, r *http.Request, service *goa.Service) (*HashResponseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := HashResponseContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *HashResponseContext) OK(r map[string]int) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *HashResponseContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ListResponseContext provides the response list action context.
type ListResponseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListResponseContext parses the incoming request URL and body, performs validations and creates the
// context used by the response controller list action.
func NewListResponseContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListResponseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListResponseContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListResponseContext) OK(r UsertypeCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.usertype+json; type=collection")
	if r == nil {
		r = UsertypeCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ListResponseContext) OKTiny(r UsertypeTinyCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.usertype+json; type=collection")
	if r == nil {
		r = UsertypeTinyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListResponseContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ShowResponseContext provides the response show action context.
type ShowResponseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID string
}

// NewShowResponseContext parses the incoming request URL and body, performs validations and creates the
// context used by the response controller show action.
func NewShowResponseContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowResponseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowResponseContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowResponseContext) OK(r *Usertype) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.usertype+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *ShowResponseContext) OKTiny(r *UsertypeTiny) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.usertype+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowResponseContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// SecuritySecurityContext provides the security security action context.
type SecuritySecurityContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewSecuritySecurityContext parses the incoming request URL and body, performs validations and creates the
// context used by the security controller security action.
func NewSecuritySecurityContext(ctx context.Context, r *http.Request, service *goa.Service) (*SecuritySecurityContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SecuritySecurityContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SecuritySecurityContext) OK(r *Messagetype) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.messagetype+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SecuritySecurityContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SecuritySecurityContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// ValidationValidationContext provides the validation validation action context.
type ValidationValidationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID          int
	DefaultType string
	Email       string
	EnumType    string
	IntegerType int
	Reg         string
	StringType  string
}

// NewValidationValidationContext parses the incoming request URL and body, performs validations and creates the
// context used by the validation controller validation action.
func NewValidationValidationContext(ctx context.Context, r *http.Request, service *goa.Service) (*ValidationValidationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ValidationValidationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["ID"]
	if len(paramID) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("ID"))
	} else {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("ID", rawID, "integer"))
		}
	}
	paramDefaultType := req.Params["defaultType"]
	if len(paramDefaultType) == 0 {
		rctx.DefaultType = "でふぉ"
	} else {
		rawDefaultType := paramDefaultType[0]
		rctx.DefaultType = rawDefaultType
	}
	paramEmail := req.Params["email"]
	if len(paramEmail) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("email"))
	} else {
		rawEmail := paramEmail[0]
		rctx.Email = rawEmail
		if err2 := goa.ValidateFormat(goa.FormatEmail, rctx.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`email`, rctx.Email, goa.FormatEmail, err2))
		}
	}
	paramEnumType := req.Params["enumType"]
	if len(paramEnumType) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("enumType"))
	} else {
		rawEnumType := paramEnumType[0]
		rctx.EnumType = rawEnumType
		if !(rctx.EnumType == "A" || rctx.EnumType == "B" || rctx.EnumType == "C") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`enumType`, rctx.EnumType, []interface{}{"A", "B", "C"}))
		}
	}
	paramIntegerType := req.Params["integerType"]
	if len(paramIntegerType) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("integerType"))
	} else {
		rawIntegerType := paramIntegerType[0]
		if integerType, err2 := strconv.Atoi(rawIntegerType); err2 == nil {
			rctx.IntegerType = integerType
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("integerType", rawIntegerType, "integer"))
		}
		if rctx.IntegerType < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`integerType`, rctx.IntegerType, 0, true))
		}
		if rctx.IntegerType > 10 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`integerType`, rctx.IntegerType, 10, false))
		}
	}
	paramReg := req.Params["reg"]
	if len(paramReg) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("reg"))
	} else {
		rawReg := paramReg[0]
		rctx.Reg = rawReg
		if ok := goa.ValidatePattern(`^[a-z0-9]{5}$`, rctx.Reg); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`reg`, rctx.Reg, `^[a-z0-9]{5}$`))
		}
	}
	paramStringType := req.Params["stringType"]
	if len(paramStringType) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("stringType"))
	} else {
		rawStringType := paramStringType[0]
		rctx.StringType = rawStringType
		if utf8.RuneCountInString(rctx.StringType) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`stringType`, rctx.StringType, utf8.RuneCountInString(rctx.StringType), 1, true))
		}
		if utf8.RuneCountInString(rctx.StringType) > 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`stringType`, rctx.StringType, utf8.RuneCountInString(rctx.StringType), 10, false))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ValidationValidationContext) OK(r *Validationtype) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.validationtype+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ValidationValidationContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}
